/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package ${package};

${entityImport}

${requiredImports}

import java.util.Set;
import java.math.BigDecimal;
import java.util.Arrays;

import net.databinder.components.hib.DataForm;
import net.databinder.models.hib.HibernateObjectModel;

import org.wicketstuff.datetime.extensions.yui.calendar.DateField;
import org.apache.wicket.Component;
import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.form.CheckBox;
import org.apache.wicket.markup.html.form.ListMultipleChoice;
import org.apache.wicket.markup.html.form.DropDownChoice;
import org.apache.wicket.markup.html.form.EnumChoiceRenderer;
import org.apache.wicket.markup.html.form.TextField;
import org.apache.wicket.markup.html.form.TextArea;
import org.apache.wicket.markup.html.form.PasswordTextField;
import org.apache.wicket.markup.html.panel.Panel;
import org.apache.wicket.model.Model;
import org.apache.wicket.model.ResourceModel;
import org.apache.wicket.AttributeModifier;

import cz.newforms.wicket.markup.html.basic.label.InvisibleLabel;
import cz.newforms.wicket.behaviors.OnClickConfirmationPopupBehavior;
import cz.newforms.wicket.markup.html.basic.label.ResourceLabel;
import cz.newforms.wicket.markup.html.form.bootstrap.BootstrapFormRowBorder;
import cz.newforms.wicket.utilities.hibernate.Dbu;
import cz.newforms.wicket.markup.html.form.UniqueStringFieldValidator;
import de.agilecoders.wicket.core.markup.html.bootstrap.button.BootstrapButton;
import de.agilecoders.wicket.core.markup.html.bootstrap.button.BootstrapLink;
import de.agilecoders.wicket.core.markup.html.bootstrap.button.Buttons;
import de.agilecoders.wicket.core.markup.html.bootstrap.image.IconType;

/**
 * @author rozkovec
 */
public class ${javaComponent} extends Panel
{

	private DataForm<${className}> form;
	private HibernateObjectModel<${className}> model;

	private boolean editMode;

	/**
	 * Construct.
	 * 
	 * @param id
	 * @param model
	 */
	public ${javaComponent}(String id, HibernateObjectModel<${className}> model)
	{
		super(id);
		this.model = model;
	}
	
	/**
	 * Construct.
	 * 
	 * @param id
	 * @param objectId
	 */
	public ${javaComponent}(String id, Number objectId)
	{
		this(id, new HibernateObjectModel<${className}>(${className}.class, objectId));
	}

	/**
	 * Construct.
	 * 
	 * @param id
	 */
	public ${javaComponent}(String id)
	{
		super(id);
		model = new HibernateObjectModel<${className}>(${className}.class);
	}

	@Override
	protected void onInitialize()
	{
		super.onInitialize();
		
		editMode = model.isBound();

		add(form = new DataForm<${className}>("form",model)
		{
		
			@Override
			protected void onBeforeSave(HibernateObjectModel<${className}> model)
			{
				super.onBeforeSave(model);

				${javaComponent}.this.onBeforeSave(model);
			}
			
			@Override
			protected void onSubmit()
			{
				onBeforeSubmit();
				super.onSubmit();
				onAfterSubmit();
				
				//clearPersistentObject();
				if (!hasError())
					if(editMode)
					{
						getSession().info(getString("${updatedRecordMessageKey}", Model.of(""), "${updatedRecordMessageDefaultValue}"));
					} else {
						getSession().info(getString("${createdRecordMessageKey}", Model.of(""), "${createdRecordMessageDefaultValue}"));
					}
			}
		});
		form.add(new ResourceLabel("legend", "${classResourceKey}","${className}"));
		
		ResourceModel labelModel;
		
		#foreach( $wrapper in $fields )
		
#if ( $wrapper.enumeration )
		${wrapper.wicketComponent}${wrapper.generics} ${wrapper.name} = new ${wrapper.wicketComponent}${wrapper.generics}("${wrapper.propertyExpression}", Arrays.asList(${wrapper.enumerationClass}.values()), new EnumChoiceRenderer${wrapper.generics}(this));
#else
		${wrapper.wicketComponent}${wrapper.generics} ${wrapper.name} = new ${wrapper.wicketComponent}${wrapper.generics}("${wrapper.propertyExpression}");
#end
#if ( $wrapper.unique )
		${wrapper.name}.add(new UniqueStringFieldValidator(${className}.class, "${wrapper.name}"));
#end
		${wrapper.name}.setLabel(labelModel = new ResourceModel("${wrapper.resourceKey}", "${wrapper.nameCapitalized}"));
#if ( $wrapper.required )
		${wrapper.name}.setRequired(true);
#else
		${wrapper.name}.setRequired(false);
#end
		${wrapper.name}.add(new AttributeModifier("placeholder", labelModel));
		form.add(${wrapper.name});
		form.add(new InvisibleLabel("${wrapper.name}-help", new ResourceModel("${wrapper.resourceHelpKey}", "")));
		#end
		
		add(newListButton("list"));

		BootstrapButton submitButton;
		form.add(submitButton = new BootstrapButton("submit", Buttons.Type.Primary));
		submitButton.setIconType(IconType.ok).setInverted(true);
		if (editMode)
			submitButton.setLabel(new ResourceModel("${updateRecordKey}", "${updateRecordDefaultValue}"));
		else
			submitButton.setLabel(new ResourceModel("${saveRecordKey}", "${saveRecordDefaultValue}"));


		BootstrapLink<${className}> deleteButton;
		form.add(deleteButton = new BootstrapLink<${className}>("delete", model, Buttons.Type.Danger)
		{
			@Override
			public void onClick()
			{
				Dbu.delete(getModelObject());
				showListPanel();
			}
		}.setIconType(IconType.remove));
		deleteButton.add(OnClickConfirmationPopupBehavior.get());
		deleteButton.setLabel(new ResourceModel("${deleteRecordKey}", "${deleteRecordDefaultValue}"));
		deleteButton.setVisible(editMode);
		
		form.add(newFormPlugPanel("bottomPlug"));
	}

	protected Component newFormPlugPanel(String id)
	{
		return new WebMarkupContainer(id);
	}
	
	protected Component newListButton(String id)
	{
		BootstrapLink<${className}> listButton;
		add(listButton = new BootstrapLink<${className}>(id, model, Buttons.Type.Info)
		{
			@Override
			public void onClick()
			{
				showListPanel();
			}
		}.setIconType(IconType.listalt));
		listButton.setLabel(new ResourceModel("${listRecordsKey}", "${listRecordsDefaultValue}"));
		return listButton;
	}

	protected void onBeforeSave(HibernateObjectModel<${className}> model)
	{
	}

	protected void showListPanel()
	{
		replaceWith(new ${javaComponentList}(getId()));
	}

	protected void onBeforeSubmit()
	{
	}
	
	protected void onAfterSubmit()
	{
		showListPanel();
	}
	
	protected HibernateObjectModel<${className}> getModel()
	{
		return model;
	}

	protected DataForm<${className}> getForm()
	{
		return form;
	}
	
	@Override
	protected void detachModel()
	{
		super.detachModel();
		if (model != null)
		{
			model.detach();
		}
	}
}
